<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!--
    配置关闭钩子：
        当应用程序关闭时，Logback会执行该关闭钩子的stop()方法，延迟2000毫秒（即2秒钟）后再继续执行后续的关闭操作。
        通过配置shutdownHook标签，可以在应用程序关闭时保证Logback进行必要的清理操作，以避免日志数据的丢失或其他问题的发生。
    -->
<!--    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook">-->
<!--        <delay>2000</delay>-->
<!--    </shutdownHook>-->

    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="./SysFile/SensorModuleClientLogs/"/>
    <!-- 定义日志文件名称 -->
    <property name="LOG_NAME" value="SensorModuleClientLog"/>
    <property name="LOG_PATTERN" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldCyan([%thread]) ==> %highlight(%msg %n)"/>
    <property name="LOG_PATTERN_EX" value="[%-5level] [%d{yyyy-MM-dd HH:mm:ss.SSS}] T:[%X{traceId}] S:[%X{sessionId}] U:[%X{userId}] [%thread] ==> %msg %n"/>
    <!--
    日志输出格式：
        %-5level：级别从左显示5个字符宽度
        %d：表示日期时间，
        %thread：表示线程名，
        %msg：日志消息，
        %n：是换行符
    -->
    <property name="STDOUT" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %black([%thread]) ==> %msg %n"/>
    <property name="boldRed" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldRed([%thread]) ==> %msg %n"/>
    <property name="boldBlue" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldBlue([%thread]) ==> %msg %n"/>
    <property name="boldGreen" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldGreen([%thread]) ==> %msg %n"/>
    <property name="boldYellow" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldYellow([%thread]) ==> %msg %n"/>
    <property name="boldMagenta" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldMagenta([%thread]) ==> %msg %n"/>
    <property name="boldCyan" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldCyan([%thread]) ==> %msg %n"/>
    <property name="boldWhite" value="%highlight([%-5level]) %d{yyyy-MM-dd HH:mm:ss.SSS} %boldWhite([%thread]) ==> %msg %n"/>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN}</pattern>
<!--            <pattern>${boldCyan}</pattern>-->
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="file_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 这里为缺省log文件命名配置。注意，如果需要支持基于flume的日志搬运，为了防止文件名滚动过程中，
        重复搬运数据，请将下面两行配置注释掉，从而保证每次生成的日志文件均包含日期信息且不会变化。-->
        <file>${LOG_HOME}/${LOG_NAME}.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${LOG_NAME}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <!-- 保存31天数据 -->
            <MaxHistory>31</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${LOG_PATTERN_EX}</pattern>
        </layout>
    </appender>

<!--    <logger name="org.springframework.beans.factory.annotation.InjectionMetadata" level="TRACE" additivity="false">-->
<!--         <appender-ref ref="console"/>-->
<!--     </logger>-->
<!--     <logger name="org.springframework.beans.factory.support.DefaultListableBeanFactory" level="TRACE" additivity="false">-->
<!--         <appender-ref ref="console"/>-->
<!--     </logger>-->

    <logger name="Red" level="DEBUG" additivity="false">
        <appender-ref ref="boldRed"/>
    </logger>
    <logger name="Blue" level="DEBUG" additivity="false">
        <appender-ref ref="boldBlue"/>
    </logger>
    <logger name="Green" level="DEBUG" additivity="false">
        <appender-ref ref="boldGreen"/>
    </logger>
    <logger name="Yellow" level="DEBUG" additivity="false">
        <appender-ref ref="boldYellow"/>
    </logger>
    <logger name="Magenta" level="DEBUG" additivity="false">
        <appender-ref ref="boldMagenta"/>
    </logger>
    <logger name="Cyan" level="DEBUG" additivity="false">
        <appender-ref ref="boldCyan"/>
    </logger>
    <logger name="White" level="DEBUG" additivity="false">
        <appender-ref ref="boldWhite"/>
    </logger>

    <!--
    logger 和 root 的区别：
        logger 用于对特定的包或类进行细粒度的日志记录配置，可以有多个，而root是全局的默认配置，用于处理所有未被具体日志记录器匹配的日志消息。
        logger 可以根据需要进行更加灵活的配置，而root则提供了一个默认的配置，确保所有日志消息都能被处理到。
    -->
    <!-- 根日志记录器（root） -->
    <!-- TRACE->DEBUG->INFO->WARN->ERROR -->
    <root level="INFO">
        <appender-ref ref="console" />
<!--        <appender-ref ref="file_log" />-->
    </root>
    <!-- 特定功能详细日志配置 -->
    <!-- cn.wlih.mapper包下使用该配置。additivity日志级别是否向上传递。level日志级别 -->
<!--    <logger name="cn.wlih.mapper" additivity="false" level="DEBUG">-->
<!--        <appender-ref ref="console" />-->
<!--        <appender-ref ref="file_log" />-->
<!--    </logger>-->
    <!-- 状态监听器。当Logback框架中发生状态变化事件时，该状态监听器的相应方法会被调用，以执行自定义的逻辑。 -->
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener"/>
</configuration>
